{"data":{"site":{"siteMetadata":{"testTemplate":"success <- function(text) {\n    cat(paste(\"\\033[32m\", text, \"\\033[0m\", sep = \"\"))\n}\n\n.solution <- \"${solutionEscaped}\"\n\n${solution}\n\n${test}\ntryCatch({\n    test()\n}, error = function(e) {\n    cat(paste(\"\\033[31m\", e[1], \"\\033[0m\", sep = \"\"))\n})","juniper":{"repo":"throughput-ec/ec-workshops","branch":"binder","kernelType":"ir","lang":"r","debug":false}}},"allCode":{"edges":[{"node":{"name":"exc_05_01","code":"# Load libraries\nlibrary(gapminder)\nsuppressMessages(library(dplyr))\n\n# Use glimpse to do an overview of gapminder\nglimpse(gapminder)"}},{"node":{"name":"exc_05_02","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Selecting our rows\ngapminder_select <- select(gapminder, country, year, lifeExp, pop)\n\n# Exploring the new dataframe\nglimpse(gapminder_select)\n"}},{"node":{"name":"exc_05_03","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Selecting our rows\ngapminder_select <- select(gapminder, country, year, lifeExp, pop)\n\n# Printing the first few rows\nhead(gapminder_select)"}},{"node":{"name":"exc_05_04","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Pipe the gapminder data\ngapminder_pipe <- gapminder %>%\n# select only the columns of interest\n  select(country, year, lifeExp, pop)\n\n# Observe the characteristics of the new dataframe\nglimpse(gapminder_pipe)"}},{"node":{"name":"exc_05_05","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Reorder the following code\n\nglimpse(result)\nresult <-\nselect(continent, gdpPercap, lifeExp, year)\n%>%\ngapminder"}},{"node":{"name":"exc_05_06","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Filter rows where country is USA\ngapminder_usa <- gapminder %>%\n  filter(country == \"United States\")\n\nhead(gapminder_usa)"}},{"node":{"name":"exc_05_07","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Use filter() to obtain observations from USA\n# and where life expectancy greater than 75\ngapminder_usa_LE <- gapminder %>%\n  filter(country == \"United States\", lifeExp > 750)\n\nhead(gapminder_usa_LE)"}},{"node":{"name":"exc_05_08","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Select your data\ngapminder_asia <- ________ %>%\n  filter(________ == ________, ________ __ 1975)\n\nhead(_________)"}},{"node":{"name":"exc_05_09","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Creating a gdp column\ngapminder_gdp <- gapminder %>%\n  mutate(gdp_total = gdpPercap * pop)\n\n# Show the first rows with the added column\nhead(gapminder_gdp)"}},{"node":{"name":"exc_05_10","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Piping multiple functions\ngapminder_multi <- gapminder %>%\n    select(country, year, lifeExp, pop, gdpPercap) %>%\n    filter(country == \"United States\", lifeExp > 75) %>%\n    mutate(gdp_total = gdpPercap * pop)\n\nhead(gapminder_multi)"}},{"node":{"name":"exc_05_11","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Grouping by country and obtaining statistics.\ngapminder %>%\ngroup_by(country) %>%\nsummarise(LifeExp_max = max(lifeExp),\n          LifeExp_min = min(lifeExp),\n          LifeExp_avg = mean(lifeExp))"}},{"node":{"name":"exc_05_12","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Grouping by country and obtaining statistics.\ngapminder %>%\n    filter(_________, _________) ____\n    _________(totalGDP = _________) ____\n    _________(country) %>%\n    _________(totalGDP_mean = _________, \n              totalGDP_sd = _________)"}},{"node":{"name":"exc_05_13","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Plotting gdpPercap vs lifeExp\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()"}},{"node":{"name":"exc_05_14","code":"# Loading the libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Organizing data to plot\ngapminder_data <- gapminder %>%\n    group_by(_______, ________) %>%\n    _________(lifeExp = mean(_______))\n\nggplot(_________, ______(x = _____, y = lifeExp, colour = _______)) +\n _________"}},{"node":{"name":"exc_05_15","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\nggplot(gapminder, aes(gdpPercap, lifeExp, colour = continent)) +\n  geom_point()"}},{"node":{"name":"exc_05_16","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\nggplot(gapminder, aes(gdpPercap, lifeExp, colour = continent)) +\n  geom_point(alpha = 0.5) +\n  scale_x_log10()"}},{"node":{"name":"exc_05_17","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Plotting and fitting a linear model\nggplot(gapminder, aes(gdpPercap, lifeExp)) +\n  geom_point() +\n  scale_x_log10() +\n  geom_smooth(method = \"lm\")"}},{"node":{"name":"exc_05_18","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Filtering countries\ngapminder_small <- gapminder %>%\n  filter(country %in% c(\"Canada\", \"United States\", \"France\", \"Australia\"))\n\n# Facet plot\nggplot(gapminder_small, aes(year, lifeExp, colour = continent)) +\n  geom_line() +\n  facet_wrap(~country)"}},{"node":{"name":"exc_05_19","code":"# Loading libraries\nsuppressMessages(library(tidyverse))\nlibrary(gapminder)\n\ngapminder_cleaned <- gapminder %>%\nfilter(year == \"2007\") %>%\nmutate(\n  pop2 = pop + 1,\n  continent = case_when(\n    continent == \"Oceania\" ~ \"Asia\",\n    TRUE ~ as.character(continent)\n  ) %>% as.factor %>%\n    fct_relevel(\"Asia\", \"Americas\", \"Europe\", \"Africa\")\n)\n\nhead(gapminder_cleaned)"}},{"node":{"name":"exc_05_20","code":"# Loading libraries\nsuppressMessages(library(tidyverse))\nlibrary(gapminder)\n\ngapminder %>% \nfilter(year == \"2007\") %>% \nmutate(\n  pop2 = pop + 1,\n  continent = case_when(\n    continent == \"Oceania\" ~ \"Asia\",\n    TRUE ~ as.character(continent)\n  ) %>% as.factor %>% \n    fct_relevel(\"Asia\", \"Americas\", \"Europe\", \"Africa\")\n) %>% \nggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(aes(size = pop, color = continent)) +\n  geom_point(aes(size = pop2), color = \"black\", shape = 21) +\n  scale_x_log10(breaks = c(500, 1000, 2000, 4000,\n                           8000, 16000, 32000, 64000)) +\n  scale_y_continuous(breaks = seq(0, 90, by = 10)) +\n  scale_color_manual(values = c(\"#f12248\", \"#5ca509\",\n                                \"#534d03\", \"#0522c5\")) "}},{"node":{"name":"exc_05_21","code":"# Loading libraries\nsuppressMessages(library(tidyverse))\nlibrary(gapminder)\n\ngapminder %>% \nfilter(year == \"2007\") %>% \nmutate(\n  pop2 = pop + 1,\n  continent = case_when(\n    continent == \"Oceania\" ~ \"Asia\",\n    TRUE ~ as.character(continent)\n  ) %>% as.factor %>% \n    fct_relevel(\"Asia\", \"Americas\", \"Europe\", \"Africa\")\n) %>% \nggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(aes(size = pop, color = continent)) +\n  geom_point(aes(size = pop2), color = \"black\", shape = 21) +\n  scale_x_log10(breaks = c(500, 1000, 2000, 4000,\n                           8000, 16000, 32000, 64000)) +\n  scale_y_continuous(breaks = seq(0, 90, by = 10)) +\n  scale_color_manual(values = c(\"#F15772\", \"#7EEB03\",\n                                \"#FBE700\", \"#54D5E9\"))  +\n # Scale properly\n  scale_size_continuous(range = c(1, 30)) +\n  guides(size = FALSE, color = \"none\") +\n# Change labels\n  labs(\n    x = \"Income\",\n    y = \"Life expectancy\"\n  ) +\n  # Remove grey background\n  theme_minimal()"}},{"node":{"name":"exc_05_22","code":"# Loading libraries\nsuppressMessages(library(tidyverse))\nlibrary(gapminder)\nlibrary(countrycode)\noptions(warn=-1)\n\nworld <- map_data(\"world\") %>%\n  filter(region != \"Antarctica\") %>% \n  mutate(\n    continent = countrycode(sourcevar = region,\n                            origin = \"country.name\",\n                            destination = \"continent\"\n    ) %>% as.factor %>% \n      fct_relevel(\"Asia\", \"Americas\", \"Europe\", \"Africa\", \"Oceania\")\n  ) %>% \n  drop_na(continent)\n\nglimpse(world, width = 50)"}},{"node":{"name":"exc_05_23","code":"# Loading libraries\nsuppressMessages(library(tidyverse))\nlibrary(gapminder)\nlibrary(countrycode)\nlibrary(ggthemes)\noptions(warn=-1)\n\n# Creating the data\nworld <- map_data(\"world\") %>%\n  filter(region != \"Antarctica\") %>% \n  mutate(\n    continent = countrycode(sourcevar = region,\n                            origin = \"country.name\",\n                            destination = \"continent\"\n    ) %>% as.factor %>% \n      fct_relevel(\"Asia\", \"Americas\", \"Europe\", \"Africa\", \"Oceania\")\n  ) %>% \n  drop_na(continent)\n\n# Plotting the data\nggplot(data = world) + \n  geom_map(map = world,\n           aes(x=long, y=lat, group = group, map_id = region,\n               fill = continent)) +\n  theme_map() +\n  scale_fill_manual(values = c(\"#F15772\", \"#7EEB03\",\n                               \"#FBE700\", \"#54D5E9\", \"#d286e6\")) +\n  guides(fill = FALSE) +\n  theme(\n    plot.background = element_rect(color = \"#B8C2CC\", fill = NA)\n  )"}},{"node":{"name":"exc_05_24","code":"# Loading libraries\nsuppressMessages(library(tidyverse))\nlibrary(leaflet)\noptions(warn=-1)\n\n# Creating the data\ndata(quakes)\n\n# Show quakes\nglimpse(quakes)\n\n# Show first 20 rows from the `quakes` dataset\nleaflet(data = quakes[1:20,]) %>% addTiles() %>%\n  addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))"}},{"node":{"name":"exc_05_25","code":"library(leaflet)\n\nmap1 <- leaflet() %>%\n              addProviderTiles(providers$Stamen.TerrainBackground) %>%\n              addTiles() %>%\n              addCircleMarkers(lng =-123.241999032 , lat = 49.267665596,\n              popup = paste0(\"UBC\"),\n              clusterOptions = markerClusterOptions(),\n              options = markerOptions(riseOnHover = TRUE))\nmap1"}},{"node":{"name":"exc_05_30","code":"library(neotoma)\n\nall_wi <- neotoma::get_dataset(gpid = \"Wisconsin\")\nplot(all_wi)"}},{"node":{"name":"exc_05_31","code":"library(neotoma)\nlibrary(leaflet)\noptions(warn=-1)\n\nall_wi <- neotoma::get_dataset(gpid = \"Wisconsin\")\n\n# We're going to use this multiple times I think, so let's make it a function:\n\n\ndataset_summary <- do.call(rbind, lapply(all_wi, \n                    function(x){\n                        # here we pull out the site information from the `dataset` objects:\n                        data.frame(name = x$site.data$site.name,\n                                    lat  = x$site.data$lat + runif(1, -0.005, 0.005),\n                                    long = x$site.data$long + runif(1, -0.005, 0.005),\n                                    type = x$dataset.meta$dataset.type)\n                    }))\n\n# The leaflet package documentation uses piping.  For the sake of this tutorial, I won't.\n# First, define a color palette for the dataset type symbol plotting.\npal <- colorFactor(\"Dark2\", domain = levels(dataset_summary$type))\n\n# Now make the leaflet map, add base raster tiles and then add the markers for the records:\nmap <- leaflet(data = dataset_summary)\nmap <- leaflet::addTiles(map)\nmap <- leaflet::addCircleMarkers(map, ~long, ~lat, \n                                popup = ~paste0(\"Site: \", as.character(name), \"<br>\",\n                                                \"Type: \", \n                                                as.character(dataset_summary$type)),\n                                color = ~pal(type),\n                                stroke = FALSE, fillOpacity = 0.5)\n# You need to explicitly call the `map` object to make it appear!\nmap\n"}},{"node":{"name":"exc_05_32","code":"library(neotoma)\nlibrary(leaflet)\nlibrary(analogue, quietly = TRUE)\noptions(warn=-1)\n\nsome_wi <- neotoma::get_dataset(gpid = \"Wisconsin\", datasettype = \"pollen\", ageyoung = 4000, ageold = 6000)\n\nwi_pollen <- neotoma::get_download(some_wi, verbose = FALSE)\n\nStratiplot(wi_pollen[[2]])\n"}},{"node":{"name":"solution_05_01","code":"# Load libraries\nlibrary(gapminder)\nsuppressMessages(library(dplyr))\n\n# Use glimpse to do an overview of gapminder\nglimpse(gapminder)"}},{"node":{"name":"solution_05_02","code":"\n\n# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Selecting our rows\ngapminder_select <- select(gapminder, country, year, lifeExp, pop)\n\n# Exploring the new dataframe\nglimpse(gapminder_select)"}},{"node":{"name":"solution_05_05","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Reorder the following code\nresult <- gapminder %>%\n    select(continent, gdpPercap, lifeExp, year)\n\nglimpse(result)"}},{"node":{"name":"solution_05_08","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Select your data\ngapminder_asia <- gapminder %>%\n  filter(continent == \"Asia\", year >= 1975)\n\nhead(gapminder_asia)"}},{"node":{"name":"solution_05_12","code":"# Loading libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Grouping by country and obtaining statistics.\ngapminder %>%\n    filter(continent == \"Americas\", year >= 2000) %>%\n    mutate(totalGDP = gdpPercap * pop) %>%\n    group_by(country) %>%\n    summarise(totalGDP_mean = mean(totalGDP),\n              totalGDP_sd = sd(totalGDP))"}},{"node":{"name":"solution_05_14","code":"# Loading the libraries\nlibrary(gapminder)\nsuppressMessages(library(tidyverse))\n\n# Organizing data to plot\ngapminder_data <- gapminder %>%\n    group_by(continent, year) %>%\n    summarise(lifeExp = mean(lifeExp))\n\nggplot(gapminder_data, aes(x = year, y = lifeExp, colour = continent)) +\n geom_line()"}}]}}}