{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 0<br>Introduction to Jupyter</h1></div>\n\n---\n\n# What is Jupyter?\n\nThe Jupyter Notebook is an open source web application that you can use to create and share documents that contain live code, equations, visualizations, and text.\n\nThe name, Jupyter, comes from the core supported programming languages that it supports: Julia, Python, and R. \n\nFor this workshop, we will be using R via [Jupyter](https://jupyter.org/index.html)\n\n---\n\nNotebooks are a great tool for exploration and for documenting your workflow.\nNotebooks allow you to write:\n- Code\n- Plots\n- Formatted text\n- Latex text for equations\n\nand much more in a single document!\n\n---\n\n- R is the programming language that runs computations.\n\n- Jupyter is an integrated development environment (IDE) that provides an interface by adding convenient features and tools.\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Jupyter_logo.svg/1200px-Jupyter_logo.svg.png\" alt=\"jupyter logo\" align=\"left\" width=\"25%\" >\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1920px-R_logo.svg.png\" alt=\"R logo\" width=\"25%\" align=\"center\">\n\n---\n\nYou can think of Jupyter Notebooks as the dashboard of a car.\n\nYou don’t drive a car by interacting with the engine but rather by interacting with the car’s dashboard.\n\nIn the same way, rather than interacting with R directly, we will be using the Jupyter's interface.\n\nJupyter will allow us to:\n- Run R code interactively\n- Use other languages such as Python, Julia, or Matlab!\n\n---\n\nThis is what a Jupyter Notebook looks like:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/01_jupyter_notebook.png?raw=true\" alt=\"Jupyter Notebook shot\" width=75% align=\"center\">\n\n---\n\n- Notebooks are great for exploration and for documenting your workflow\n- There are many options for sharing notebooks in human readable format:\n  - Share online with [nbviewer.jupyter.org](http://nbviewer.jupyter.org/)\n  - Github renders automatically any notebooks that you push.\n  - You can convert to HTML, PDF, etc. with [nbconvert](https://nbconvert.readthedocs.io/en/latest/)\n\n---\n\n# Let's practice!\n","fields":{"slug":"/chapter1_01_introduction"}}},{"node":{"rawMarkdownBody":"\n# What is Binder?\n\nAlthough we can install software and dependencies in our local machine, we will be working with a Binder on this module. \n\n\n\nA Binder is a code repository that contains:\n\n- Code or content that you’d like people to run. This might be a Jupyter Notebook.\n\n- Configuration files for your environment. This ensures that your code is reproducible.\n\n---\n\nYou will be working simultaneously with the Binder notebook and these slides.\n\nYou can find the  <a href=\"https://mybinder.org/v2/gh/throughput-ec/ec-binder/HEAD\" target=\"_blank\">Binder</a>.\n\nClick on the previous link, the Binder will be launched. Choose to open a Jupyter Notebook and you must see the following:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/02_binder.png?raw=true\" alt=\"Jupyter Notebook shot\" width=55% align=\"center\">\n\n---\n\nKeep in mind that any work that you do on the Binder will not be saved.\nYou will have to download your work each time you work with the Binder.\n\n---\n\n# Explore the Jupyter Notebook in the <a href=\"https://mybinder.org/v2/gh/throughput-ec/ec-binder/HEAD\" target=\"_blank\">Binder</a>\n\n!","fields":{"slug":"/chapter1_02_using_binder"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/>Your First Notebook</h1></div>\n\n---\n\n### Create a New Notebook\n\n- Navigate to the `binder` repository. Here is the [link]('https://mybinder.org/v2/gh/throughput-ec/ec-binder/HEAD').\n\n- Under Notebooks, select R.\n- This will create a new untitled notebook\n  - Note the .ipynb extension (comes from \"interactive Python notebook\", the previous name before it was changed to Jupyter to reflect multi-language support)\n  - Rename the notebook to \"workshop.ipynb\"\n\n- Notebooks usually auto-save periodically, since we are in a Binder, all your new content will be lost once the Binder is closed.\n- You can download your notebooks by clicking on File -> Download\n---\n\n## Working with Notebooks\n\nA notebook consists of a series of \"cells\":\n- **Code cells**: execute snippets of code and display the output\n- **Markdown cells**: formatted text, equations, images, and more\n\nBy default, a new cell is always a code cell.\n\n---\n\n## Code Cells\n\nTo run a code cell, click in it and press `Shift-Enter` or press the Run button on the toolbar\n\nThis is an example of a Code Cell\n\n```r\n# Print something\nprint(\"Hello world\", quote = FALSE)\n```\n\n```out\nHello world\n```\n\n---\n\n## Markdown Cells\n\nIn Markdown cells, you can write plain text or add formatting and other elements with [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet). These include headers, **bold text**, *italic text*, hyperlinks, equations $A=\\pi r^2$, inline code `print('Hello world!')`, bulleted lists, and more.\n\n\nThis is a markdown cell:\n```\nHello~!\n```\n---\n\n\n- To create a Markdown cell, select an empty cell and change the cell type from \"Code\" to \"Markdown\" in the dropdown menu on the toolbar\n- To run a Markdown cell, press `Shift-Enter` or the Run button on the toolbar\n- To edit a Markdown cell, you need to double-click inside it\n\n---\n\n## Other Notebook Basics\n\n- Organizating cells &mdash; insert, delete, cut/copy/paste, move up/down, split, merge\n- Running all cells or selected cell(s)\n- Restarting and interrupting the kernel\n- Caveat: Notebooks are nonlinear and running cells out of order can sometimes lead to unexpected results\n  - It's good practice to periodically restart the kernel and run all cells, making sure that everything works as expected when you run the whole notebook from top to bottom\n- Closing vs. shutting down a notebook &mdash; kernel process in background\n- Re-opening a notebook after shutdown\n  - All the code output is maintained from the previous kernel session\n- Clear output of all cells or selected cell(s)\n\n---\n\n# Let's practice!\n","fields":{"slug":"/chapter1_03_creating_a_notebook"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 0<br>Learning Outcomes</h1></div>\n\n---\n\nBy the end of this module, you should:\n\n1. Understand what a Binder is.\n\n2. Write a standard configuration file; such as `environment.yml` or an `install.R`.\n\n3. Prepare a repository for Binder.\n\n4. Run a Jupyter Notebook or an Rmd in a temporary environment in the cloud ([Binder](mybinder.org))\n\n5. Share a link to a reproducible workflow.\n\n6. Know the limitations of Binder\n\n---\n\n# Let's learn about Binder!","fields":{"slug":"/chapter4_00_learning_outcomes"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 1<br>Introduction to Binder</h1></div>\n\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n<title>Page Title</title>\n<style>\n    /* The . with the boxed represents that it is a class */\n    .boxed {\n    background: white;\n    color: black;\n    border: 3px solid black;\n    margin: 0px auto;\n    width: 700px;\n    padding: 10px;\n    border-radius: 10px;\n    }\n</style>\n</head>\n\n---\n\n# What is Binder?\n**Motivation: Going Beyond Paper**\n\n- Binder is a Jupyter tool for sharing interactive notebooks with others.\n\n- When publishing an article in paper, text and images might not suffice for the reader to understand all the expressed concepts.\n\n- Luckily, a lot of researchers publish their workflow on GitHub as well. \n\n- If we ran their code, we would probably understand their ideas better.\n\n- However, we might encounter difficulties while trying to read/reproduce other's people code...\n\n---\n\n# What is Binder?\n**Motivation: Reading Other People's Code**\n\n<img src=\"https://www.explainxkcd.com/wiki/images/8/89/code_quality_3.png\" alt=\"Other people code map\" width=65% align=\"center\">\n\n[Source: XKCD cartoon](http://xkcd.com/1833/)\n\n---\n\n# What is Binder?\n**Motivation: Sharing Code**\n\nSharing and reproducing other people's code may come with some challenges.\n\nBecause of this, there are different tools to share code that is reproducible:\n\n- Creating Virtual Environments\n- Creating a Docker Image\n- Writing a very precise manual on how to create the right environment to run your code\n\nEach of these methodologies come with each own set of challenges and it might be complicated or require some expertise.\nFurthermore, they will still require some efforts from your user.\n\n---\n\n# What is Binder?\n**Motivation: Sharing Code**\n\nWith Binder, we can:\n\n- Get/Provide one link with a prebuilt environment where we can run the Jupyter notebook or Rmd smoothly.\n\n- Spend the time understanding the code rather than setting up the environment to execute the code.\n\n---\n\n# What is Binder?\n**Sharing a Single Link**\n\nThat way, our emails can transition from this: \n\n<body>\n<div class=\"boxed\">\n\nHi Jane,  \nI am so happy that you like our project and that you want to run our code to understand our  figures better! \nTo run our code without installing dependencies, you will need to:  \n- Install Docker and repo2docker   \n- Download the image from the DockerHub - you can find the link in the repo.\n- Run from your terminal  \n```\nrepo2docker https://github.com/throughput-ec/ec-workshops\n```\nThat will generate a long output and at the end there will be a URL. Copy that ULR and paste it into your browser.  Send me an email if you have any issues with the installations.\nBest,  \nS\n\n</div>\n</body>\n\n---\n\n# What is Binder?\n**Sharing a Single Link**\n\nto this:\n\n<div class=\"boxed\">\n\nDear Jane,  \nI am so happy that you like our project and that you want to run our code to understand our  figures better! \nPlease click on this link to start executing our code.  \n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/throughput-ec/ec-workshops/binder)   \nBest,  \nS\n\n</div>\n\n---\n\n# Uses of Binder\n**Motivation: Your Next Project**\n\nIf your intent is to share a Notebook or an Rmd file, consider using Binder.\n\nOther popular uses for Binder include:\n\n- Sharing computational work or papers\n- Sharing educational material\n- Generating interactive open-source package documentation\n- Creating live demonstrations\n\n---\n\n# Let's review what we learned!","fields":{"slug":"/chapter4_01_introduction_to_binder"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 2<br>Setting a Binder Up</h1></div>\n\n---\n# Getting to the Hub\n\nIf you visit [mybinder.org](https://mybinder.org/) you will encounter the following screen:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/00_binder.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\nBefore you can fill in the information, what do you need to create a Binder repository?\n\n---\n\n# What Do you Need to Build a Binder Repository?\n**Git Repository**\n\n- You will need to have a Git repository.\n\n- The repository must be in a *public* location online. \n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/02_github.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n# What Do you Need to Build a Binder Repository?\n**Git Repository**\n\n- You can work with other Git repository hosting manager tool such as:\n    - `GitHub`, `GitLab`, `Bitbucket`, and MORE!\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/01_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# What Do you Need to Build a Binder Repository?\n**Configuration Files**\n\n- The repository must have configuration files that specify its environment.\n\n- Configuration files should be placed in the root of the repository or in a binder/ folder in the repository’s root.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/03_github.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# What Do you Need to Build a Binder Repository?\n**A File to Share**\n\n- The repository contains content designed for people to read.\n    - A Jupyter Notebook \n    - An R script to make a visualization.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/04_github.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# What Do you Need to Build a Binder Repository?\n**Security**\n\n- The repository **does not** require any sensitive information \n    - Passwords\n    - API secrets\n    - Personal information\n    - Private data\n\n---\n\n# What Do you Need to Build a Binder Repository?\n**A BinderHub**\n\n- Binders are powered by a BinderHub, an open-source tool that deploys the Binder service to the cloud.\n\n- There are several BinderHubs that you may use:\n    - [Binder Pangeo](https://binder.pangeo.io/)\n    - [mybinder.org](https://mybinder.org/)\n    - [Alan Turing Institute Binder](https://turing.mybinder.org/)\n    - and [others](https://mybinder.readthedocs.io/en/latest/about/federation.html)\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/00_binder.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\n---\n\n# Binder's Behind the Scenes\n**repo2docker**\n\nBinder uses a tool that mimics how humans do reproducible code **repo2docker**.\n\n- It clones a github repository.\n\n- It looks for configuration files \n    - These files describe the dependencies needed for the project.\n    - It recognizes files named: `environment.yml`, `requirements.txt`, `install.R`, `Dockerfile`, and MORE.\n\n- It installs the dependencies based on the configuration file.\n\n- Starts a Jupyter Notebook / RStudio session.\n\n---\n\n# Let's practice what we learned!","fields":{"slug":"/chapter4_02_what_does_a_binder_repo_need"}}},{"node":{"rawMarkdownBody":"  \n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 3<br>Setting Up the Python Binder</h1></div>\n\n---\n\n# Step 1\n\n- Create a **public** GitHub repository.\n- You can name your GitHub repository as you like.\n- Initialize your repository with a README!\n- Clone the repository to your local machine.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/02_github.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Step 2\n\n- Inside your Github repository folder:\n    - Create a Jupyter notebook.\n    - Open a new code cell and write:\n    ```\n    import folium\n\n    m = folium.Map(location=[49.267665596, -123.241999032], zoom_start=12)\n\n    tooltip = \"Click Here For More Info\"\n\n    marker = folium.Marker(\n        location=[49.267665596, -123.241999032],\n        popup=\"<stong>UBC</stong>\",\n        tooltip=tooltip)\n    marker.add_to(m)\n\n    m\n    ```\n    - Save the Jupyter notebook. \n\n---\n\n# Step 3 \n\n— Create an `environment.yml` file into your Github repository.\n\nFor our previous example, our dependencies are `folium` (and `pandas`).\n\nOur `environment.yml` file should look like this:\n\n```\nname: my-example-environment\nchannels:\n  - conda-forge\ndependencies:\n  - pandas\n  - folium\n```\n\nYou can find a template in the next \"activity\"\n\n---\n\n# Step 4 \n\n- Push all your repository changes back to GitHub.\n- Your repository should look now like this:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/05_github.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Step 5\n\n- Go to my binder.\n- Type the URL of your repo into the \"GitHub repo or URL\" box. It should look like this:\n```\nhttps://github.com/your-username/my-first-python-binder\n```\n\n- Where it says Git ref type in main or the branch that you woud like to use.\n- Where it says \"URL to open (optional)\" type in the notebook file name and choose \"file\". \n\n- As you type, the webpage generates a link in the \"Copy the URL below...\" box. It should look like this:\n```\nhttps://mybinder.org/v2/gh/your-username/my-first-python-binder/HEAD\n```\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/06_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n\n---\n\n# Step 5b\n\n- Once this is done simply hit the launch button. \n- My Binder will create your binder repo in a few minutes.\n- Be patient. The first time it might take some while to build.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/07_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Step 6\n\n- Copy the generated link, open a new browser tab and visit that URL.\n\n- You will see a \"spinner\" as Binder launches the repository.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/08_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n\n---\n\n# Step 7\n\n- Navigate your Jupyter notebook.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/09_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Step 8\n\n- Once built, you can share the link to this with anybody you want to run your project on their machine.\n\n- Save your LaunchBinder Badge and share it!\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/10_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Let's practice!","fields":{"slug":"/chapter4_03_python_repository"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 4<br>Setting Up the R Binder</h1></div>\n\n---\n\n# Step 1\n\n- Create a **public** GitHub repository.\n- You can name your GitHub repository as you like.\n- Initialize your repository with a README!\n- Clone the repository to your local machine.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/11_github.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Step 2\n\n- Inside your Github repository folder:\n    - Create an Rmd file.\n    - Copy and paste the following slide. We'll learn more about Rmd files in the next module.)\n    - Save the Rmd file. \n\n---\n'''\n\n    ```{r setup, include=FALSE}  \n    knitr::opts_chunk$set(echo = TRUE)  \n    library(leaflet)  \n    leaflet(options = leafletOptions(minZoom = 0, maxZoom = 18))  \n    ```\n\n    ## My Leaflet Map\n\n    **TASK:** Find UBC in a Leaflet map.\n \n\n    ```{r}\n    map1 <- leaflet() %>%  \n                addProviderTiles(providers$Stamen.TerrainBackground) %>%  \n                addTiles() %>%  \n                addCircleMarkers(lng =-123.241999032 , lat = 49.267665596,  \n                popup = paste0(\"UBC\"))  \n    map1  \n    ```\n'''\n---\n\n# Step 3 \n\n— You will need two files in your repository:\n1. `runtime.txt` Specify the R version by date. The easiest day, write today's date (e.g. r-2021-12-07). \n\n    ```\n    r-2021-12-07\n    ```\n\n2. `install.R` A list of `install.packages('package_name')` commands, one per line.\n    For our example\n    ```\n    install.packages(c(\"leaflet\", \"tidyverse\"\n                       \"knitr\", \"rmarkdown\",\n                       \"caTools\", \"bitops\"))\n    ```\n    \nYou can find a template for both files in the next section.\n\n---\n\n# Step 4 \n\n- Push all your repository changes back to GitHub.\n- Your repository should look now like this:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/12_github.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Step 5\n\n- Go to my binder.\n- Type the URL of your repo into the \"GitHub repo or URL\" box. It should look like this:\n```\nhttps://github.com/your-username/my-first-R-binder\n```\n\n- Where it says Git ref type in main or the branch that you woud like to use.\n- Where it says \"URL to open (optional)\", choose URL and type `rstudio`\n- As you type, the webpage generates a link in the \"Copy the URL below...\" box. It should look like this:\n```\nhttps://mybinder.org/v2/gh/your-username/my-first-R-binder/main?urlpath=rstudio\n```\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/13_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Step 5b\n\n- Once this is done simply hit the launch button. \n- My Binder will create your binder repo in a few minutes.\n- Be patient. The first time it might take some while to build.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/14_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Step 6\n\n- Copy the generated link, open a new browser tab and visit that URL.\n\n- You will see a \"spinner\" as Binder launches the repository.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/08_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n\n---\n\n# Step 7\n\n- You will have to open your `.Rmd` file manually by clicking on it.\n    - You can find it on the bottom right panel.\n\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/15_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Step 8\n\n- Once built, you can share the link to this RStudio instance with anybody you want to run your project on their machine.\n\n- Save your LaunchBinder Badge and share it!\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/16_binder.png?raw=true\" alt=\"Binder from Git\" width=45% align=\"center\">\n\n---\n\n# Let's practice!","fields":{"slug":"/chapter4_04_R_repository"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> What We Learned</h1></div>\n\n--- \n\n# Binder is ...\n\n- Code sharing made easy\n\n- You will never have to say again \"but it ran in my computer\"\n\n- A Binder Repository contains at minimum two elements:\n    - Code or content that you want people to be able to run. \n    - Configuration files for the environment.\n    \n- Binders Hubs allow you to deploy Juypter Notebooks and Rmd the easy way\n\n---\n\nIf you want to launch some sample binders take a look at:\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/throughput-ec/ec-binder/HEAD) Jupyter Binder\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/throughput-ec/ec-binder/main?urlpath=rstudio) RStudio Binder\n\n---\n\n# Advantages of Binder\n\n- Binder lets you share links to interactive data analytics environments. This is great for workshops, tutorials, and classes.\n- Binder can provide interactivity to documentation and demonstrations of tools. \n- Binder can provide interactivity to readers, allowing them a more rich experience with your content.\n\n---\n\n# Limitations of Binder\n- Each instance is limited to 2 gb of RAM and will get destroyed after 10 minutes of inactivity. \n- Each instance can run for a maximum of 24 hours before it will get killed.\n- You can get around these limitations by hosting your own binder hub but this will require compute + devops resources from your side.\n\n---\n\n# Let's practice what we learned!","fields":{"slug":"/chapter4_05_summary_and_conclusions"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 0<br>Learning Outcomes</h1></div>\n\n---\n\nBy the end of this module, you should be able to:\n\n- Create, edit and run an Rscript \n- Write and run R Markdown reports\n- Create and run R Markdown presentations\n- Elaborate an RStudio project\n- Edit/customize RStudio project settings \n- Use RStudio as a Git client to manage your project's version control (?)\n\n---\n\n# Let's Get Started!","fields":{"slug":"/chapter5_00_learning_outcomes"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 1<br>Introduction to RStudio</h1></div>\n\n---\n\n# What is RStudio?\n\nRStudio is an IDE (integrated development environment) mainly used for R.\n\nIt includes tools for:\n- linting\n- code completion\n- debugging.\n\nYou can also work with Rmd files which enable a notebook-like functionality.\nYou can use other language engines, such as Python.\n\n---\n\n## Opening RStudio\n\nIf you open *RStudio* you will encounter the following screen:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module4/00_rstudio.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\n---\n\n## Running Rscripts in RStudio\n\n- Launch this [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/throughput-ec/ec-binder/main?urlpath=rstudio) in a new tab and follow these steps:\n\n- Creating a new R script: \n  * From the menu clcik on: \n      File -> New File -> R Script\n\n- Write a simple R code the document that shows up in the editor:\n```r\n4 + 5\n```\n\n- Run your code clicking on the \"Source\" button (upper right-hand side) to run the entire document.\n- To run a single line, type Ctrl+Enter (Command+Return) to run the current line or highlighted code\n\n--\n\n## Code output\n\nWhen running R code in the console output ends up in one of to places, depending on the type of output:\n\n* Textual output: printed to the console.\n\n* Graphical output: displayed in the Files/Help/Plots panel *usually* at the bottom right of the Window.\n\n---\n\n## Getting help in RStudio\n\nIf you want to know more about what a function or package does, type a `?` followed by the function's name\n\n```\n?function_name\n```\n\nHelp is going to be available in the bottom right pane of RStudio.\n\n---\n\n## The Files Pane Importance\n\nWhen you open in RStudio a `.R` or `.Rmd` file the RStudio, the current working directory is **not** neccesarily the project working directory, or the directory of the file you opened.\n\n---\n\n## Where am I? (or the files pane)\n\n**EVERY SESSION** you need to tell RStudio what your `working directory` is. Especially if you are loading different files.\n\nYou can find out where you are by:\n\n1. typing `getwd()` in the console\n\n2. In the files panel, click the cog/More button and then click \"Go To Working Directory\"\n\n---\n\n## Setting your Working Directory\n\nSet your working directory to the root directory of the Git repository you are working in!\n\nYou can set the working directory using the following 3 ways:\n\n1. In the Session menu, click Set Working Directory and then Choose Directory. Navigate the opened file browser to choose the directory. \n\n2. In the files panel, navigate the file structure to where you want the working directory to be. Then click the cog/More button and then click \"Set As Working Directory\"\n\n3. type `setwd(\"PATH\")` in the console.\n\n---\n\n## Setting the working directory is important!\n\nIf you are working in RStudio and you start feeling lost, you probably forgot to set the working directory.\n\nWe will see how to create R Projects later which will help us keep our directory clean.\n\n**Suggestion:** Try using the [here](https://github.com/jennybc/here_here) package instead.\n\n---\n\n# Let's Practice!\n","fields":{"slug":"/chapter5_01_introduction_to_Rstudio"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 2<br>Creating an R Markdown Document</h1></div>\n\n---\n\n## What is an R Markdown\n\nAn R Markdown document is very similar to a Jupyter Notebook.\n\nIt allows you to create and share documents that contain live code, equations, visualizations, and text.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/00_rstudio.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\n---\n\n## Getting Started\n\n- To create a new R Markdown: \n  * From the menu clcik on: \n      File -> New File -> R Markdown\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/03_create_markdown.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\n---\n\n- You will be asked to choose some settings for the R Markdown.\n- For now, leave the default options. \n  - At the end of the module you will see which other outputs you could choose.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/04_create_markdown.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\n---\n\n## Text and rendering R Markdown documents\n\nIn a RMarkdown document any line of text not in a code chunk will be formatted using Markdown. You can use HTML and LaTeX here to do more formatting. \n\nUnlike Jupyter, code and text do not render on their own; you will need to \"knit\" (render) the whole document in order to see the rendered output. \n\nClicking the \"Knit\" button on the top to render the docuemnt:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/01_knit_button.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n \n---\n\nWhen you \"knit\" a Markdown (`.md`) file will be created and a new window will pop up with your rendered document (usually a `.pdf` or `.html` document). \n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/02_rmd.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\n---\n\n## Rendering Often\n\nIt is important to \"knit\" as often as you make important changes.\n\nOtherwise, an error in a LaTeX equation or a code chunk will stop the rendering process resulting in an error. \n\nIf you have a long document, it might be harder to identify what went wrong, so it is important to render often so that you will easily identify and fix errors. \n\n---\n\n## Creating code chunks\n\nInstead of code cells as in Jupyter, R Markdown has code chunks. \n\nTo start a Code Chunk: \n- Write 3 backticks (\\`\\`\\`) followed by curly braces containing the language engine you want to run (usually r): `{r}`. \n- If you want to use python, do `{python}`\n\n- Code is entered on the lines below.\n\n- To finish a Code Chunk, close it with 3 more backticks (\\`\\`\\`).\n\n---\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/05_code_chunk.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\n- Code chunks are run when you knit the entire document. \n- The code in the chunk and the code output will be included in your rendered Markdown (`.md`) document. \n\n---\n\n## Naming Code Chunks and Markdown sections\n\nWhen you include Markdown headers (`#` symbol) R Studio automatically creates a pop-up-like menu for you to use to navigate the document:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/06_title_navigator.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\n---\n\nYou can also name Code Chunks by writing the desired name after the language engine inside the curly braces:\n```{r my-name}\n# This code chunk is named my-name\n```\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/07_code_navigator.png?raw=true\" alt=\"Binder\" width=45% align=\"center\">\n\nBy clicking on any of the options in the pop-up-like menu, RStudio will navigate you to that section of the R Markdown document. \n\nWARNING: Do not duplicate code chunk names.\n\n---\n\n## Code Chunk Options\n\nThere are many code chunk options that you can set, for example:\n- Choose whether a chunk is evaluated - allowing you to ignore code that may have errors and still render the Rmd file.\n- Choose Whether to include the output in the rendered document\n- Lots of ther [options](https://yihui.org/knitr/options/#chunk-options) document.\n\n---\n## Code Chunk Options\n\n- Code Chunk options can be set at a global level or locally for a specific chunk.\n- Global options are set in one chunk at the top of the document. For example:\n\n```{r, setup, include=FALSE}\nknitr::opts_chunk$set(\n  comment = '', fig.width = 6, fig.height = 6\n)\n```\n\n- Global chuncks are set by adding them as arguments to the function `knitr::opts_chunk$set(...)`\n\n---\n\n## Code Chunk Options\n\n- Local chunk options are set by adding the options in the curly braces of a code chunk after the language engine and code chunk name. For example:\n\n```{r correlation no warning, warning = FALSE}\ncor( c( 1 , 1 ), c( 2 , 3 ) )\n```\n\n- Separate multiple options in a code chunk with a comma. \n\n---\n\n## Document output options\n\n- Besides Markdown text and code chunks, you can add an optional YAML header to your document.\n\n- Specify a YAML header surrouding it with `---`\n\n- Include:\n  - title\n  - author\n  - output\n  - etc\n---\n\n## Example YAML Header**\n\n```\n---\ntitle: \"Finding coordinates in a map\"\nauthor: \"My Name\"\ndate: \"December 07, 2021\"\noutput: html\n---\n```\n\n---\n\nOutput options include:\n\n- `output: github_document`\n- `output: html_document`\n- `output: pdf_document`\n- [others](https://bookdown.org/yihui/rmarkdown/output-formats.html)","fields":{"slug":"/chapter5_02_creating_an_Rmd_file"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 3<br>Creating a Presentation with R Markdown</h1></div>\n\n---\n\n## How to Set Up a Presentation\n\n- Open a new R Markdown file\n\n- In the YAML header output specify `ioslides_presentation` \n\n- You can create a slide show broken up into sections by using the # and ## heading tags \n\n- A Slide without a header can be set by using a horizontal rule (---). \n\n- Code and text will be rendered: remember to use your code chunks options accordingly.\n\n- Do the Next exercise to do your first R Markdown presentation\n\n---\n\n# Let's practice what we learned!\n","fields":{"slug":"/chapter5_03_creating_a_presentation"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 4<br>Creating an RStudio Project</h1></div>\n\n---\n\n# What is an R Project?\n\n- A directory containing a special file: `*.Rproj`\n\n- Allows you to do the following:\n\n  - use RStudio as a Git client\n\n  - stop using `setwd()` to set your working directory\n\n---\n\n## Getting Started\n\n- To create a new R Project: \n  * From the menu clcik on: \n      File -> New Project\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/09_rproj.png?raw=true\" alt=\"RProject\" width=45% align=\"center\">\n\n---\n\n- A pop up will show up.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/10_rproj.png?raw=true\" alt=\"RProject\" width=45% align=\"center\">\n\n---\n\n## Creating RStudio projects\n\nYou can choose if you want to start a new project from:\n- A GitHub repository\n- An existing directory\n- A completely new directory\n\n---\n\n## Creating from a completely new directory\n\n- Click on `New Directory`\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/11_rproj.png?raw=true\" alt=\"RProject\" width=45% align=\"center\">\n\n---\n\n- Name the project and browse where would you like to set it up.\n\n- Optionally, you can also set up a new git repository from here.\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/12_rproj.png?raw=true\" alt=\"RProject\" width=45% align=\"center\">\n\n---\n\nIf you already have a git repository\n\n1. Click on `Version Control`\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module5/10_rproj.png?raw=true\" alt=\"RProject\" width=45% align=\"center\">\n\n\n2. Fill in:\n  - Repository URL\n  - Create Project as a subdirectory of\n  \n---\n\n## Motivation - avoid using setwd()\n\nSo what’s wrong with:\n\n```\nsetwd(\"~/USER/my_awesome_project/sub_project_1/data\")\nread_data(\"data_shared_with_everyone.csv\")\n```\n\n- The chance of the `setwd()` command making the file paths work for anyone besides its author is 0%. Even the future author might have issues down the line.\n\n- Your data analysis project is not self-contained and portable, which makes recreating your work impossible.\n\n---\n\n## Solution - Where is your working directory?\n\n- After you created an R project, your working directory should now be the R Project's root directory. \n\n**Verify that by typing `getwd()` in your R console**\n\n---\n\n## Using RStudio to drive Git\n\n- RStudio can be used as a Git GUI to `add`, `commit`, `push` and `pull` your changes. \n\n- This only works IF you have a `.Rproj` file.\n\n- You can find the Git tab in the upper right panel of RStudio.\n\n---\n\n## Use `.Rproj` to open Rstudio\n\n- You can double click on the `.Rproj` file of an RStudio project to open RStudio.\n\n- When you do this, it also sets the currentl working directory to be the RStudio project's working directory.\n\n---\n\n## Organizing projects:\n\n- A data analysis task can be organized using RStudio Project. \n\n- A suggestion on how to organize a project directory is:\n\n```\ndata/\nresults/\nscripts/\n.Rproj\n```\nwhere `data/`, `results/`, and `scripts/` are directories as well.\n\n- When you need to share an analysis, you can share the entire project over. \n\n- This will keep the structure of your project.\n\n---\n\n# Let's Practice What We Learned","fields":{"slug":"/chapter5_04_R_project"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> What We Learned</h1></div>\n\n--- \n\n## RStudio\n\n- RStudio is an integrated development environment (IDE) mainly for R. \n- It includes 4 panels, including:\n  - an editor that supports direct code execution\n  - tools for plotting, history, debugging\n  - a console.\n\n- It allows us to create Rmd files which work as Jupyter Notebooks\n- We can create self contained code projects using R projects.\n\n---\n\n## An R Markdown File\n\n- A file format for making dynamic documents with R. \n- An R Markdown document is written in markdown (an easy-to-write plain text format) and contains chunks of embedded R code and markdown text.\n- R Markdown files are the source code for reproducible documents. You can transform an R Markdown file in two ways:\n  * `knit` - knitr will run each chunk of code in the document and append the results of the code to the document next to the code chunk. This workflow facilitates reproducible reports.\n\n  * `convert` - The rmarkdown package will use the pandoc program to transform the file into a new format such as: HTML, PDF, or Microsoft Word file. This is defined in the YAML header.\n---\n\n# Let's practice what we learned!","fields":{"slug":"/chapter5_05_summary_and_conclusions"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 0<br>Learning Outcomes</h1></div>\n\n---\n\nBy the end of this module, you should be able to:\n\n- Understand what Docker is\n- Use Docker Images from the DockerHub\n- Create your own Docker Images\n\n<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--up7-nOgB--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/mfnwwxkfx46xzrlndw12.png\" alt=\"Motivation Docker\" width=50% align=\"center\">\n\n\n---\n\n# Let's Get Started!","fields":{"slug":"/chapter6_00_learning_outcomes"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 1<br>Introduction to Docker</h1></div>\n\n---\n\n## What is Docker?\n**Motivation**\n\n<img src=\"https://derickbailey.com/wp-content/uploads/2017/02/WOMM.jpg\" alt=\"Motivation Docker\" width=45% align=\"center\">\n\n[Source](https://derickbailey.com/2017/02/08/digging-into-the-works-on-my-machine-problem/)\n\n---\n\n## What is Docker?\n**Motivation**\n\nImagine the following scenario:\n- You are working on an analysis in R / python and you send your code to a colleague.\n\n- Your colleague runs exactly this code on exactly the same data but they get a different result or even worse, an error. \n\n- Some reasons for this to happen: A different operating system, a different version of R or of an R package. \n\n- Docker is trying to solve problems like that. \n\n- Docker is an open-source containerization platorm.\n\n---\n\n## What is Docker?\n\n- A Docker container can be seen as a computer inside your computer. \n\n- You can send this \"inside computer\" to your colleagues.\n\n- Your colleagues will use this \"virtual computer\" and run your code. They will get exactly the same results.\n\n- Docker allows you to wrangle dependencies (from the operating system up to details such as R, python and Latex package versions).\n\n- It makes sure that your analyses are reproducible.\n\n- It makes your analysis **portable**  and **sharable**.\n\n---\n## Important Vocabulary\n\nThrough our journey with Docker, the following terms might come often:\n\n- Virtual Machine\n- Container\n- Docker Image\n- Docker Container\n\n---\n\n### Virtual Machine\n- Not different from your tangible computer/phone/server.\n\n- A VM has its own CPU, storage, memory, and access to the internet.\n\n- software-based versions of a computer sotred in a file tipically called an **image**\n\n- A *VM image* is a set of instructions on how exactly to assemble the code and achieve a desired software configuration.\n\n---\n\n### Container\n- Software executable bundles where the bins, libraries, and dependencies are packaged alongside their cod under a standardized framework.\n\n- Lightweight images of application can then be run anywehre: desktop, cloud, etc...\n\n- This avoids the \"It works on my machine\" problem.\n\n- \"docker\" and \"containers\" are terms that currently, people use interchaingeable.\n\n---\n\n### Docker Image\n\n- Source code for binaries, libraries, tools, dependencies that are required to function as an application.\n\n- When Docker runs an image, it becomes a container.\n\n- One image can be the base for multiple containers that share commonalities.\n\n- You can add several \"layers\" of images on top of the container layer. \n\n---\n\n### Docker Container\n\n- What we ultimately build: the application that is completely interactable by users and administrators.\n\n- Remember Docker Images are a set of instructions to build a container.\n\n- This is the \"background service\" that runs the Docker operations.\n\n- Keeps track of Docker operations and assigns them with proper tags.\n\n---\n\n# Let's Practice!\n","fields":{"slug":"/chapter6_01_introduction_to_docker"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 2<br>Launching Docker</h1></div>\n\n---\n\n## Installation\n\n- Follow the installation instructions. [Get Docker](https://docs.docker.com/get-docker/). \n\n- You will be directed to several tutorials. Feel free to take a look at them.\n\n---\n\n## Launching Our First Docker Image\n\n1. Launch Docker is to open a Unix Shell:\n  - On Mac or Windows, use the `Docker Quickstart Terminal` that you installed.\n  - On a linux machine, use a terminal prompt.\n\n2. We are going to use a pre-existing image: [rocker/geospatial](https://hub.docker.com/r/rocker/geospatial). \n\n3. In the `Docker Quickstart Terminal` type:\n\n```\ndocker run --rm -p 8787:8787 rocker/verse\n```\n\n---\n\n## Launching Our First Docker Image\n\n`*p` and `--rm` are flags that customize how the container is run. \n\n`-p` : This is the port that you need to specify where you will be working. Since we specified that we wanted to use port 8787 in our command line, we need to go to:\nhttp://localhost:8787/\n\n`-–rm`: delete the container when it is quitted. Otherwise, a version of it will be saved to our local computer. Containers can occupy a lot of disk space.\n\n---\n## Launching Our First Docker Image\n\n- You should see:\n````markdown\n                        ##         .\n                  ## ## ##        ==\n               ## ## ## ## ##    ===\n           /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\\___/ ===\n      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~\n           \\______ o           __/\n             \\    \\         __/\n              \\____\\_______/\ndocker is configured to use the default machine with IP 192.168.99.100\nFor help getting started, check out the docs at https://docs.docker.com\nThus, you would enter http://192.168.99.100:8787 in your browser as the url.\n````\n---\n\n## The Hub\n\nWhere did `rocker/geospatial` came from? \n- If you try to run a Docker container which you have not installed locally, Docker will automatically search for the container on Docker Hub (an online repository for docker images).\n- If it exists, it will download it.\n\n---\n\n- The command above will lead RStudio-Server to launch invisibly. \n- To connect to it, open a browser and enter `http://localhost:8787/`\n- You should see RStudio welcome screen. Log in using:\n\n```\nusername: rstudio \npassword: rstudio\n```\n\n- You are able to work with RStudio in your browser in much the same way as you would on your desktop.\n\n---\n\n## Linking Volumes\n\n1. Given that we used the `--rm` flag when we launched the Docker container, anything we create on the machine will be gone. Let’s verify this.\n\n2. Open a new R script.\n\n3. Enter the following code in the script, run it and save it:\n\n```\n# make x the numbers from 1 to 5, and y the numbers from 6-10\nx <- 1:5\ny <- 6:10\n\n# plot x against y\nplot(x, y)\n```\n---\n\n## Linking Volumes\n\n4. In your files panel, you will see the new script file.\n\n5. Close the browser tab where you have RStudio open, and then go to your terminal window from where you launched the Docker container and type Contol+C. This shuts down the Docker container.\n\n6. Relaunch a Docker container using the RStudio image as you did previously:\n```\ndocker run --rm -p 8787:8787 rocker/verse\n```\n\n7. Go to `http://localhost:8787/` in your browser.\n\n8. The R script you created ... is... gone.\n\n---\n\n## Linking Volumes\n\n- Linking a volume allows to access data and save files in our local machine.\n\n- When launching a container, add the `-v` flag along with the path to your project’s root directory and the path to the container: \n```\ndocker run --rm -p 8787:8787 -v /Users/your_user/Documents/r_docker_tutorial:/home/rstudio/r-docker-tutorial rocker/verse\n```\n\n- Go then to `http://localhost:8787/` in your browser.\n\n- Set the working directory to the directory called `r_docker_tutorial`\n\n- You can load data from your computer into the launched RStudio tab.\n\n- You can save your analysis into the `r_docker_tutorial` directory.\n\n- If you created a document, when you close the RStudio browser and exit your Docker container look inside the `r_docker_tutorial` directory to find them.\n\n---\n\n# Let's Practice!","fields":{"slug":"/chapter6_02_launching_a_docker"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 3<br>The DockerHub</h1></div>\n\n---\n## What is the Docker Hub?\n- We used it last module.\n- Docker Hub is the place where open Docker images are stored. \n- When we ran our first image by typing\n```\ndocker run --rm -p 8787:8787 rocker/verse\n```\nDocker checked if this image is available on your computer.\n\n- If not, the image is downloaded \"automatically\" from Docker Hub. \n\n- If you just want to pull the image but not run it, you can also do\n```\ndocker pull rocker/verse\n```\n\n---\n\n## Pushing an image to Docker Hub\nIf you made your own Docker image, you can share it in https://hub.docker.com/. \nAfter verifying your email you are ready to go and upload your first docker image.\n\n## Setting an account\n\n1. Create an account and log in on https://hub.docker.com/\n2. Click on Create Repository.\n3. Choose a name and a description for your repository and click Create.\n4. Now, log into the Docker Hub from the command line\n```\ndocker login --username=yourhubusername --email=youremail@company.com\n```\n5. Enter your password when prompted. \n6. If everything worked you will get a message similar to\n```\nWARNING: login credentials saved in /home/username/.docker/config.json\nLogin Succeeded\n```\n---\n\n## Getting an image reaady\n\n1. Check the image ID using\n```\ndocker images\n```\nand what you will see will be similar to\n\n```\nREPOSITORY                         TAG       IMAGE ID       CREATED         SIZE\ncourse-starter-python_gatsby       latest    8ec687baf514   3 weeks ago     1.38GB\nec_workshops_gatsby                latest    8ec687baf514   3 weeks ago     1.38GB\nrocker/rstudio                     latest    1878e29db52f   3 months ago    1.93GB\nrocker/verse                       latest    0168d115f220   3 days ago      1.954 GB\nds-toolbox_gatsby                  latest    c7a440cb78ff   3 months ago    2.25GB\nsedv8808/unacquired_sites_db_app   latest    a8a671927478   10 months ago   1.26GB\nsedv8808/unacquired_sites_ml_app   latest    6dd7e4093508   10 months ago   1.39GB\n```\n\n---\n## Tagging your Image\n\n- Tag your image doing:\n```\ndocker tag 0168d115f220 yourhubusername/changed_verse:firsttry\n```\n\n- The number must match the image ID and `:firsttry` is the tag. \n- A good tag will help you understand what this particular image is intended for.\n- Examples of good tags:\n    - A paper’s DOI or journal-issued serial number\n    - A particular version of a code or data version control repo\n\n---\n\n## Push your image \n\n- To push your image, type:\n```\ndocker push yourhubusername/verse_gapminder\n```\n\nYour image is now available for everyone to use.\n\n---\n\n## Saving your images locally\n\n- To save a Docker image after you have pulled, committed or built it you use the docker save command. \n```\ndocker save verse_gapminder > verse_gapminder.tar\n```\n\n- To load that Docker container from the archived tar file in the future, we can use the docker load command:\n```\ndocker load --input verse_gapminder.tar\n```\n\n---\n\n# Let's Practice What We Learned","fields":{"slug":"/chapter6_03_pushing_pulling_dockerhub"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 4<br>Dockerfiles</h1></div>\n\n---\n\n## What is a Dockerfile?\n\n- Dockerfiles are a set of instructions on how to add things to a base image. \n\n- They build custom images up in a series of layers. \n\n---\n## Writing a Dockerfile\n\n1. In a new file called Dockerfile, put the following:\n\n```\nFROM rocker/verse:latest\n```\nThis tells Docker to start with the rocker/verse base image. \nThe `FROM` command must always be the first thing in your Dockerfile.\n\n2. Add a layer on top of our verse. Install `gapminder`.\n```\nRUN R -e \"install.packages('gapminder', repos = 'http://cran.us.r-project.org')\"\n```\n\n`RUN` commands in your Dockerfile execute shell commands to build up your image,\n\n3. Save the Dockerfile.\n\n---\n\n## Writing a Dockerfile\n\n4. Return to the Docker terminal.\n\n5. Build the image by doing:\n```\ndocker build -t my-r-image .\n```\n\n`-t my-r-image` names the image (use only lower case)\n`.` says all the resources we need to build the image are in our current directory. \n\n6. List your images via:\n```\ndocker images\n```\n7. You should see `my-r-image` in the list. \n\n\n---\n\n## Launch your new image \n\n- Simply do the commands that you already know:\n```\ndocker run --rm -p 8787:8787 my-r-image\n```\n\nThen in the RStudio terminal in the browser, try gapminder again:\n\n```\nlibrary('gapminder')\ngapminder\n\n```\n\n`gapminder` is pre-installed and ready to go in your new docker image.\n\n---\n\n## Adding Data\n\n- You may also want some some static files inside our Docker image - such as data.\n- Add a line in the Dockerfile:\n```\nADD data/gapminder-FiveYearData.csv /home/rstudio/\n```\nRebuild your Docker image:\n```\ndocker build -t my-r-image .\n```\nAnd launch it again:\n```\ndocker run --rm -p 8787:8787 my-r-image\n```\nGo back to RStudio in the browser, and `gapminder-FiveYearData.csv` will be, present in the files visible to RStudio.\n\n---\n\n# Let's practice what we learned!\n","fields":{"slug":"/chapter6_04_Dockerfiles"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> What We Learned</h1></div>\n\n---\n\n## Docker\n\nContainers allow us to:\n\n- Functionality for apps regardless of the host operating system.\n\n- High portability: everything is packed together, so it is easy to transfer these apps from project to project.\n\n- High sharability.\n\n---\n\n# Let's practice what we learned!","fields":{"slug":"/chapter6_05_summary_and_conclusions"}}}]}}}